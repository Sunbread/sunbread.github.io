"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[79],{79:(t,n,e)=>{e.a(t,(async(t,o)=>{try{e.r(n),e.d(n,{generate:()=>d});var r=e(189),a=e(887);const c=await r.wV.create("./model.onnx"),s="゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ".split(""),i=["<pad>","<sos>","<eos>"].concat(s),l=2;function f(t){const n=new Array(16);for(let e=0;e<16;++e){const o=4600*e;n[e]=u(t.slice(o,o+4600))}return n.filter((t=>void 0!==t))}function u(t){const n=new Array(40);for(let o=0;o<40;++o){const r=115*o,a=t.slice(r,r+115);n[o]=(e=a,Array.from(e).map(((t,n)=>[t,n])).reduce(((t,n)=>n[0]>t[0]?n:t))[1])}var e;const o=n.findIndex((t=>t===l));return void 0===o?void 0:n.map((t=>i[t])).slice(0,o).join("")}async function d(){try{const t={latent_vector:new r.qY("float32",Float32Array.from(function*(){const t=a(0,1);for(let n=0;n<1024;++n)yield t.ppf(Math.random())}()),[16,64])};return f((await c.run(t)).output.data)}catch(t){console.log(`failed to inference: ${t}`)}}o()}catch(p){o(p)}}),1)}}]);