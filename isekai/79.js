"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[79],{79:(e,t,n)=>{n.r(t),n.d(t,{generate:()=>l});var o=n(189),r=n(887);const a="゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ".split(""),c=["<pad>","<sos>","<eos>"].concat(a),s=2;function i(e){const t=new Array(40);for(let o=0;o<40;++o){const r=115*o,a=e.slice(r,r+115);t[o]=(n=a,Array.from(n).map(((e,t)=>[e,t])).reduce(((e,t)=>t[0]>e[0]?t:e))[1])}var n;const o=t.findIndex((e=>e===s));return void 0===o?void 0:t.map((e=>c[e])).slice(0,o).join("")}async function l(){try{const e=await o.wV.create("./model/model.onnx"),t={latent_vector:new o.qY("float32",Float32Array.from(function*(){const e=r(0,1);for(let t=0;t<1024;++t)yield e.ppf(Math.random())}()),[16,64])};return function(e){const t=new Array(16);for(let n=0;n<16;++n){const o=4600*n;t[n]=i(e.slice(o,o+4600))}return t.filter((e=>void 0!==e))}((await e.run(t)).output.data)}catch(e){console.log(`failed to inference: ${e}`)}}}}]);