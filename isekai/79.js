"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[79],{79:(t,e,n)=>{n.r(e),n.d(e,{generate:()=>l});var o=n(189),r=n(887);const a="゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ".split(""),c=["<pad>","<sos>","<eos>"].concat(a),s=2;function i(t){const e=new Array(40);for(let o=0;o<40;++o){const r=115*o,a=t.slice(r,r+115);e[o]=(n=a,Array.from(n).map(((t,e)=>[t,e])).reduce(((t,e)=>e[0]>t[0]?e:t))[1])}var n;const o=e.findIndex((t=>t===s));return void 0===o?void 0:e.map((t=>c[t])).slice(0,o).join("")}async function l(){try{const t=await o.wV.create("./model.onnx"),e={latent_vector:new o.qY("float32",Float32Array.from(function*(){const t=r(0,1);for(let e=0;e<1024;++e)yield t.ppf(Math.random())}()),[16,64])};return function(t){const e=new Array(16);for(let n=0;n<16;++n){const o=4600*n;e[n]=i(t.slice(o,o+4600))}return e.filter((t=>void 0!==t))}((await t.run(e)).output.data)}catch(t){console.log(`failed to inference: ${t}`)}}}}]);